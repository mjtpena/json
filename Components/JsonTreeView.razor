@using System.Text.Json
@using System.Text.Json.Nodes

<div style="padding: 16px; font-family: monospace;">
    @if (JsonNode != null)
    {
        @RenderJsonNode(JsonNode, "root", 0, true)
    }
</div>

@code {
    [Parameter] public JsonNode? JsonNode { get; set; }
    
    private RenderFragment RenderJsonNode(JsonNode node, string key, int depth, bool isRoot = false)
    {
        var indent = new string(' ', depth * 4);
        
        return __builder => {
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "style", $"margin-left: {depth * 20}px;");
            
            switch (node)
            {
                case JsonObject obj:
                    __builder.AddContent(2, $"{indent}{key}: {{");
                    __builder.OpenElement(3, "div");
                    foreach (var kvp in obj)
                    {
                        if (kvp.Value != null)
                        {
                            __builder.AddContent(4, RenderJsonNode(kvp.Value, kvp.Key, depth + 1));
                        }
                    }
                    __builder.CloseElement();
                    __builder.AddContent(5, $"{indent}}}");
                    break;
                    
                case JsonArray arr:
                    __builder.AddContent(6, $"{indent}{key}: [");
                    __builder.OpenElement(7, "div");
                    for (int i = 0; i < arr.Count; i++)
                    {
                        if (arr[i] != null)
                        {
                            __builder.AddContent(8, RenderJsonNode(arr[i]!, $"[{i}]", depth + 1));
                        }
                    }
                    __builder.CloseElement();
                    __builder.AddContent(9, $"{indent}]");
                    break;
                    
                case JsonValue value:
                    var valueStr = value.ToString();
                    __builder.AddContent(10, $"{indent}{key}: {valueStr}");
                    break;
                    
                default:
                    __builder.AddContent(11, $"{indent}{key}: null");
                    break;
            }
            
            __builder.CloseElement();
        };
    }
}