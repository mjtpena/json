@page "/documentation"
@using JsonBlazer.Services
@inject DocumentationService DocumentationService
@inject ClipboardService ClipboardService
@inject ISnackbar Snackbar
@inject FileService FileService

<PageTitle>Documentation - Ultimate JSON Tool</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h3" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Description" Class="mr-2" />Documentation Generator
    </MudText>
    <MudText Typo="Typo.body1" Class="mb-4" Color="Color.Secondary">
        Generate comprehensive documentation from your JSON data in multiple formats
    </MudText>
    
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-3">Generate Documentation</MudText>
                
                <MudTextField @bind-Value="@_inputJson"
                             Label="JSON Schema or Sample Data"
                             Lines="15"
                             Variant="Variant.Outlined"
                             Class="mb-4" />
                
                <MudStack Row Spacing="2" Class="mb-4">
                    <MudSelect @bind-Value="@_outputFormat" Label="Output Format" Variant="Variant.Outlined">
                        <MudSelectItem Value="@OutputFormat.Markdown">üìù Markdown</MudSelectItem>
                        <MudSelectItem Value="@OutputFormat.Html">üåê HTML</MudSelectItem>
                        <MudSelectItem Value="@OutputFormat.Json">üìÑ JSON</MudSelectItem>
                        <MudSelectItem Value="@OutputFormat.Yaml">üìã YAML</MudSelectItem>
                    </MudSelect>
                    
                    <MudSelect @bind-Value="@_docType" Label="Documentation Type" Variant="Variant.Outlined">
                        <MudSelectItem Value="@DocumentationType.ApiDocumentation">üöÄ API Documentation</MudSelectItem>
                        <MudSelectItem Value="@DocumentationType.SchemaDocumentation">üìä Schema Documentation</MudSelectItem>
                        <MudSelectItem Value="@DocumentationType.ReadmeTemplate">üìñ README Template</MudSelectItem>
                        <MudSelectItem Value="@DocumentationType.PostmanCollection">üìÆ Postman Collection</MudSelectItem>
                        <MudSelectItem Value="@DocumentationType.OpenApiSpec">üîß OpenAPI Spec</MudSelectItem>
                        <MudSelectItem Value="@DocumentationType.TypeScriptInterface">üî∑ TypeScript Interface</MudSelectItem>
                        <MudSelectItem Value="@DocumentationType.CSharpClass">üü£ C# Class</MudSelectItem>
                    </MudSelect>
                </MudStack>
                
                <MudStack Row Spacing="2">
                    <MudButton OnClick="@GenerateDocumentation" 
                              Variant="Variant.Filled" 
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.AutoAwesome"
                              Disabled="@_isGenerating">
                        @if (_isGenerating)
                        {
                            <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                            <span class="ml-2">Generating...</span>
                        }
                        else
                        {
                            <span>Generate Documentation</span>
                        }
                    </MudButton>
                    <MudButton OnClick="@ClearAll" 
                              Variant="Variant.Outlined" 
                              Color="Color.Secondary"
                              StartIcon="@Icons.Material.Filled.Clear">
                        Clear
                    </MudButton>
                    <MudButton OnClick="@LoadSampleData" 
                              Variant="Variant.Text" 
                              Color="Color.Info"
                              StartIcon="@Icons.Material.Filled.DataObject">
                        Load Sample
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-3">Generated Documentation</MudText>
                
@if (!string.IsNullOrWhiteSpace(_output))
                {
                    <MudStack Row Justify="Justify.SpaceBetween" Class="mb-3">
                        <MudStack Row Spacing="1">
                            <MudChip Icon="@GetFormatIcon(_outputFormat)" Color="Color.Success" Size="Size.Small">
                                @_outputFormat.ToString().ToUpperInvariant()
                            </MudChip>
                            <MudChip Icon="@GetTypeIcon(_docType)" Color="Color.Info" Size="Size.Small">
                                @GetTypeDisplayName(_docType)
                            </MudChip>
                        </MudStack>
                        <MudStack Row Spacing="1">
                            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                          OnClick="@(() => CopyToClipboard(_output))"
                                          Title="Copy to clipboard"
                                          Size="Size.Small" />
                            <MudIconButton Icon="@Icons.Material.Filled.Download" 
                                          OnClick="@(() => DownloadDocumentation())"
                                          Title="Download file"
                                          Size="Size.Small" />
                        </MudStack>
                    </MudStack>
                }
                
                <MudTextField @bind-Value="@_output"
                             Lines="15"
                             Variant="Variant.Outlined"
                             ReadOnly="true"
                             Class="text-mono" />
                
@if (!string.IsNullOrWhiteSpace(_output) && _outputFormat == OutputFormat.Html)
                {
                    <MudDivider Class="my-4" />
                    <MudText Typo="Typo.subtitle2" Class="mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.Preview" Class="mr-1" Size="Size.Small" />
                        HTML Preview:
                    </MudText>
                    <MudPaper Class="pa-3" Style="max-height: 400px; overflow-y: auto; border: 1px solid var(--mud-palette-divider);">
                        @((MarkupString)_output)
                    </MudPaper>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
    
<!-- Documentation Templates -->
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Filled.ViewModule" Class="mr-2" />Documentation Templates
        </MudText>
        
        <MudGrid>
            @foreach (var template in _templates)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="2" Class="template-card">
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle1" Class="mb-2">@template.Name</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-3">
                                @template.Description
                            </MudText>
                            <MudButton OnClick="@(() => LoadTemplate(template.Content))" 
                                      Variant="Variant.Filled" 
                                      Color="Color.Primary"
                                      Size="Size.Small"
                                      FullWidth="true"
                                      StartIcon="@Icons.Material.Filled.Upload">
                                Load Template
                            </MudButton>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
    
<!-- Features -->
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" Class="mr-2" />Documentation Features
        </MudText>
        
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudText Typo="Typo.subtitle2" Class="mb-2" Color="Color.Primary">‚ú® Generation</MudText>
                <MudList Dense="true">
                    <MudListItem Icon="@Icons.Material.Filled.AutoFixHigh">
                        <MudText Typo="Typo.body2">Auto-generate from JSON data</MudText>
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.Schema">
                        <MudText Typo="Typo.body2">Schema analysis & validation</MudText>
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.Timeline">
                        <MudText Typo="Typo.body2">Structure complexity analysis</MudText>
                    </MudListItem>
                </MudList>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudText Typo="Typo.subtitle2" Class="mb-2" Color="Color.Secondary">üìÑ Formats</MudText>
                <MudList Dense="true">
                    <MudListItem Icon="@Icons.Material.Filled.Code">
                        <MudText Typo="Typo.body2">Multiple output formats</MudText>
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.Api">
                        <MudText Typo="Typo.body2">OpenAPI & REST documentation</MudText>
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.Language">
                        <MudText Typo="Typo.body2">TypeScript & C# interfaces</MudText>
                    </MudListItem>
                </MudList>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudText Typo="Typo.subtitle2" Class="mb-2" Color="Color.Info">üöÄ Export</MudText>
                <MudList Dense="true">
                    <MudListItem Icon="@Icons.Material.Filled.Download">
                        <MudText Typo="Typo.body2">Download documentation files</MudText>
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.ContentCopy">
                        <MudText Typo="Typo.body2">Copy to clipboard</MudText>
                    </MudListItem>
                    <MudListItem Icon="@Icons.Material.Filled.Collections">
                        <MudText Typo="Typo.body2">Postman collection export</MudText>
                    </MudListItem>
                </MudList>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

<style>
    .template-card {
        transition: all 0.3s ease;
        cursor: pointer;
    }
    .template-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(0,0,0,0.12) !important;
    }
    .text-mono {
        font-family: 'Fira Code', 'JetBrains Mono', 'Cascadia Code', monospace;
        font-size: 13px;
        line-height: 1.4;
    }
</style>

@code {
    private string _inputJson = "";
    private string _output = "";
    private OutputFormat _outputFormat = OutputFormat.Markdown;
    private DocumentationType _docType = DocumentationType.ApiDocumentation;
    private bool _isGenerating = false;
    private List<DocumentationTemplate> _templates = new();
    
protected override async Task OnInitializedAsync()
    {
        _templates = DocumentationService.GetTemplates();
    }
    
    private async Task GenerateDocumentation()
    {
        if (string.IsNullOrWhiteSpace(_inputJson))
        {
            Snackbar.Add("Please provide JSON data to generate documentation", Severity.Warning);
            return;
        }
        
        _isGenerating = true;
        StateHasChanged();
        
        try
        {
            var options = new DocumentationOptions
            {
                Type = _docType,
                OutputFormat = _outputFormat,
                IncludeExamples = true,
                IncludeErrorCodes = true
            };
            
            var result = DocumentationService.GenerateDocumentation(_inputJson, options);
            
            if (result.Success)
            {
                _output = result.Content;
                Snackbar.Add("Documentation generated successfully!", Severity.Success);
            }
            else
            {
                _output = $"Error: {result.Error}";
                Snackbar.Add($"Generation failed: {result.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _output = $"Unexpected error: {ex.Message}";
            Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isGenerating = false;
            StateHasChanged();
        }
    }
    
private async Task CopyToClipboard(string text)
    {
        try
        {
            await ClipboardService.CopyToClipboardAsync(text);
            Snackbar.Add("Documentation copied to clipboard!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to copy: {ex.Message}", Severity.Error);
        }
    }

    private async Task DownloadDocumentation()
    {
        try
        {
            var fileName = GetFileName();
            await FileService.DownloadTextFileAsync(fileName, GetMimeType(), _output);
            Snackbar.Add($"Documentation downloaded as {fileName}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Download failed: {ex.Message}", Severity.Error);
        }
    }

    private void LoadTemplate(string templateContent)
    {
        _inputJson = templateContent;
        Snackbar.Add("Template loaded successfully!", Severity.Success);
    }

    private void LoadSampleData()
    {
        _inputJson = """
        {
          "id": 1,
          "name": "Sample API",
          "version": "1.0.0",
          "endpoints": [
            {
              "path": "/users",
              "method": "GET",
              "description": "Get all users"
            },
            {
              "path": "/users/{id}",
              "method": "GET",
              "description": "Get user by ID"
            }
          ],
          "authentication": {
            "type": "Bearer",
            "required": true
          }
        }
        """;
        Snackbar.Add("Sample data loaded!", Severity.Info);
    }

    private string GetFileName()
    {
        var extension = _outputFormat switch
        {
            OutputFormat.Markdown => "md",
            OutputFormat.Html => "html",
            OutputFormat.Yaml => "yml",
            OutputFormat.Json => "json",
            _ => "txt"
        };
        
        var typePrefix = _docType switch
        {
            DocumentationType.ApiDocumentation => "api-docs",
            DocumentationType.SchemaDocumentation => "schema",
            DocumentationType.ReadmeTemplate => "README",
            DocumentationType.PostmanCollection => "postman-collection",
            DocumentationType.OpenApiSpec => "openapi",
            DocumentationType.TypeScriptInterface => "interfaces",
            DocumentationType.CSharpClass => "models",
            _ => "documentation"
        };
        
        return $"{typePrefix}.{extension}";
    }

    private string GetMimeType()
    {
        return _outputFormat switch
        {
            OutputFormat.Html => "text/html",
            OutputFormat.Json => "application/json",
            OutputFormat.Yaml => "application/x-yaml",
            _ => "text/plain"
        };
    }

    private string GetFormatIcon(OutputFormat format)
    {
        return format switch
        {
            OutputFormat.Markdown => Icons.Material.Filled.TextFormat,
            OutputFormat.Html => Icons.Material.Filled.Language,
            OutputFormat.Json => Icons.Material.Filled.DataObject,
            OutputFormat.Yaml => Icons.Material.Filled.Description,
            _ => Icons.Material.Filled.Article
        };
    }

    private string GetTypeIcon(DocumentationType type)
    {
        return type switch
        {
            DocumentationType.ApiDocumentation => Icons.Material.Filled.Api,
            DocumentationType.SchemaDocumentation => Icons.Material.Filled.Schema,
            DocumentationType.ReadmeTemplate => Icons.Material.Filled.ReadMore,
            DocumentationType.PostmanCollection => Icons.Material.Filled.Collections,
            DocumentationType.OpenApiSpec => Icons.Material.Filled.Settings,
            DocumentationType.TypeScriptInterface => Icons.Material.Filled.Code,
            DocumentationType.CSharpClass => Icons.Material.Filled.Class,
            _ => Icons.Material.Filled.Description
        };
    }

    private string GetTypeDisplayName(DocumentationType type)
    {
        return type switch
        {
            DocumentationType.ApiDocumentation => "API",
            DocumentationType.SchemaDocumentation => "Schema",
            DocumentationType.ReadmeTemplate => "README",
            DocumentationType.PostmanCollection => "Postman",
            DocumentationType.OpenApiSpec => "OpenAPI",
            DocumentationType.TypeScriptInterface => "TypeScript",
            DocumentationType.CSharpClass => "C#",
            _ => "Documentation"
        };
    }

    private void ClearAll()
    {
        _inputJson = "";
        _output = "";
        Snackbar.Add("Content cleared", Severity.Info);
    }
}