@page "/"

<PageTitle>JSON Editor - Ultimate JSON Tool</PageTitle>

<div class="hero-section">
    <div class="hero-content">
        <div class="hero-text">
            <h1 class="hero-title">
                <span class="json-bracket">{</span>
                <span class="hero-highlight">JSON</span>
                <span class="json-bracket">}</span>
                <span class="hero-subtitle">Editor</span>
            </h1>
            <p class="hero-description">
                The ultimate developer toolkit for JSON manipulation. Format, validate, transform, and explore JSON with ease.
            </p>
        </div>
        <div class="hero-actions">
            <div class="action-group primary-actions">
                <MudButton StartIcon="@Icons.Material.Filled.FormatIndentIncrease" 
                          Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          Size="Size.Large"
                          Class="hero-btn"
                          OnClick="FormatJson">
                    Format JSON
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Check" 
                          Variant="Variant.Outlined" 
                          Color="Color.Success" 
                          Size="Size.Large"
                          Class="hero-btn"
                          OnClick="ValidateJson">
                    Validate
                </MudButton>
            </div>
            <div class="action-group secondary-actions">
                <MudButton StartIcon="@Icons.Material.Filled.Compress" 
                          Variant="Variant.Text" 
                          Color="Color.Secondary"
                          OnClick="MinifyJson">
                    Minify
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.AccountTree" 
                          Variant="Variant.Text" 
                          Color="Color.Info"
                          OnClick="ToggleTreeView">
                    Tree View
                </MudButton>
            </div>
        </div>
    </div>
</div>

    <div class="editor-workspace">
        <div class="editor-panel @(_showTreeView ? "split-view" : "full-view")">
            <div class="panel-header">
                <div class="panel-title">
                    <MudIcon Icon="@Icons.Material.Filled.DataObject" Size="Size.Medium" Color="Color.Primary" />
                    <span class="panel-name">JSON Editor</span>
                    <div class="panel-actions">
                        <MudChip T="string"
                                Icon="@(_isValidJson ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                                Color="@(_isValidJson ? Color.Success : Color.Error)" 
                                Size="Size.Small">
                            @(_isValidJson ? "Valid" : "Invalid")
                        </MudChip>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" 
                                      Size="Size.Small" 
                                      Color="Color.Default" />
                    </div>
                </div>
            </div>
            <div class="editor-content">
                <MudTextField @bind-Value="_jsonContent" 
                              Lines="25"
                              Variant="Variant.Outlined"
                              Immediate="true"
                              OnBlur="OnContentChanged"
                              Class="code-editor"
                              Placeholder="Enter or paste your JSON here..."
                              FullWidth="true" />
            </div>
        </div>

        @if (_showTreeView)
        {
            <div class="tree-panel">
                <div class="panel-header">
                    <div class="panel-title">
                        <MudIcon Icon="@Icons.Material.Filled.AccountTree" Size="Size.Medium" Color="Color.Info" />
                        <span class="panel-name">Tree View</span>
                        <div class="panel-actions">
                            <MudIconButton Icon="@Icons.Material.Filled.Close" 
                                          Size="Size.Small" 
                                          Color="Color.Default"
                                          OnClick="ToggleTreeView" />
                        </div>
                    </div>
                </div>
                <div class="tree-content">
                    @if (_jsonTree != null)
                    {
                        <JsonTreeView JsonNode="_jsonTree" />
                    }
                    else
                    {
                        <div class="empty-state">
                            <MudIcon Icon="@Icons.Material.Filled.AccountTree" 
                                    Size="Size.Large" 
                                    Color="Color.Secondary" />
                            <MudText Typo="Typo.body1" Color="Color.Secondary">
                                Enter valid JSON to see the tree structure
                            </MudText>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

@if (!string.IsNullOrEmpty(_validationResult))
{
    <div class="status-bar @(_isValidJson ? "success" : "error")">
        <div class="status-content">
            <MudIcon Icon="@(_isValidJson ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)" 
                    Color="@(_isValidJson ? Color.Success : Color.Error)" />
            <span class="status-text">@_validationResult</span>
        </div>
    </div>
}

@code {
    private bool _showTreeView = true;
    private string _validationResult = "";
    private bool _isValidJson = true;
    private JsonNode? _jsonTree;
    private string _jsonContent = @"{
  ""name"": ""John Doe"",
  ""age"": 30,
  ""email"": ""john@example.com"",
  ""address"": {
    ""street"": ""123 Main St"",
    ""city"": ""New York"",
    ""zipcode"": ""10001""
  },
  ""hobbies"": [""reading"", ""coding"", ""gaming""],
  ""active"": true
}";

    protected override async Task OnInitializedAsync()
    {
        await ValidateJson();
    }

    private void ToggleTreeView()
    {
        _showTreeView = !_showTreeView;
        StateHasChanged();
    }

    private async Task OnContentChanged()
    {
        await ValidateJson();
    }

    private async Task ValidateJson()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_jsonContent))
            {
                _validationResult = "";
                _isValidJson = true;
                _jsonTree = null;
                StateHasChanged();
                return;
            }

            _jsonTree = JsonNode.Parse(_jsonContent);
            _isValidJson = true;
            _validationResult = "✓ Valid JSON";
        }
        catch (System.Text.Json.JsonException ex)
        {
            _isValidJson = false;
            _validationResult = $"✗ Invalid JSON: {ex.Message}";
            _jsonTree = null;
        }
        catch (Exception ex)
        {
            _isValidJson = false;
            _validationResult = $"✗ Error: {ex.Message}";
            _jsonTree = null;
        }

        StateHasChanged();
    }

    private async Task FormatJson()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_jsonContent)) return;

            using var jsonDoc = JsonDocument.Parse(_jsonContent);
            var options = new JsonSerializerOptions
            {
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            };
            _jsonContent = System.Text.Json.JsonSerializer.Serialize(jsonDoc.RootElement, options);
            await ValidateJson();
        }
        catch (Exception ex)
        {
            _validationResult = $"✗ Cannot format: {ex.Message}";
            _isValidJson = false;
            StateHasChanged();
        }
    }

    private async Task MinifyJson()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_jsonContent)) return;

            using var jsonDoc = JsonDocument.Parse(_jsonContent);
            _jsonContent = System.Text.Json.JsonSerializer.Serialize(jsonDoc.RootElement);
            await ValidateJson();
        }
        catch (Exception ex)
        {
            _validationResult = $"✗ Cannot minify: {ex.Message}";
            _isValidJson = false;
            StateHasChanged();
        }
    }
}