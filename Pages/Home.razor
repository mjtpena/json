@page "/"

<PageTitle>JSON Editor - Ultimate JSON Tool</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4 ma-2" Elevation="2">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h4">JSON Editor & Viewer</MudText>
                <MudStack Row Spacing="2">
                    <MudButton StartIcon="@Icons.Material.Filled.FormatIndentIncrease" Variant="Variant.Filled" Color="Color.Primary" OnClick="FormatJson">
                        Format
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Compress" Variant="Variant.Filled" Color="Color.Secondary" OnClick="MinifyJson">
                        Minify
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Check" Variant="Variant.Outlined" Color="Color.Success" OnClick="ValidateJson">
                        Validate
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="@(_showTreeView ? 6 : 12)">
        <MudPaper Class="pa-2 ma-2" Elevation="2" Style="height: 70vh;">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
                <MudText Typo="Typo.h6">JSON Editor</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.AccountTree" Color="Color.Primary" OnClick="ToggleTreeView" />
            </MudStack>
            
            <MudTextField @bind-Value="_jsonContent" 
                          Lines="30"
                          Variant="Variant.Filled"
                          Immediate="true"
                          OnBlur="OnContentChanged"
                          Class="json-editor"
                          Style="font-family: 'Roboto Mono', monospace;" />
        </MudPaper>
    </MudItem>

    @if (_showTreeView)
    {
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-2 ma-2" Elevation="2" Style="height: 70vh;">
                <MudText Typo="Typo.h6" Class="mb-2">Tree View</MudText>
                <div style="height: calc(100% - 40px); overflow: auto;">
                    @if (_jsonTree != null)
                    {
                        <JsonTreeView JsonNode="_jsonTree" />
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Warning">Invalid JSON - cannot display tree view</MudAlert>
                    }
                </div>
            </MudPaper>
        </MudItem>
    }

    @if (!string.IsNullOrEmpty(_validationResult))
    {
        <MudItem xs="12">
            <MudAlert Severity="_isValidJson ? Severity.Success : Severity.Error" Class="ma-2">
                @_validationResult
            </MudAlert>
        </MudItem>
    }
</MudGrid>

@code {
    private bool _showTreeView = true;
    private string _validationResult = "";
    private bool _isValidJson = true;
    private JsonNode? _jsonTree;
    private string _jsonContent = @"{
  ""name"": ""John Doe"",
  ""age"": 30,
  ""email"": ""john@example.com"",
  ""address"": {
    ""street"": ""123 Main St"",
    ""city"": ""New York"",
    ""zipcode"": ""10001""
  },
  ""hobbies"": [""reading"", ""coding"", ""gaming""],
  ""active"": true
}";

    protected override async Task OnInitializedAsync()
    {
        await ValidateJson();
    }

    private void ToggleTreeView()
    {
        _showTreeView = !_showTreeView;
        StateHasChanged();
    }

    private async Task OnContentChanged()
    {
        await ValidateJson();
    }

    private async Task ValidateJson()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_jsonContent))
            {
                _validationResult = "";
                _isValidJson = true;
                _jsonTree = null;
                StateHasChanged();
                return;
            }

            _jsonTree = JsonNode.Parse(_jsonContent);
            _isValidJson = true;
            _validationResult = "✓ Valid JSON";
        }
        catch (System.Text.Json.JsonException ex)
        {
            _isValidJson = false;
            _validationResult = $"✗ Invalid JSON: {ex.Message}";
            _jsonTree = null;
        }
        catch (Exception ex)
        {
            _isValidJson = false;
            _validationResult = $"✗ Error: {ex.Message}";
            _jsonTree = null;
        }

        StateHasChanged();
    }

    private async Task FormatJson()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_jsonContent)) return;

            using var jsonDoc = JsonDocument.Parse(_jsonContent);
            var options = new JsonSerializerOptions
            {
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            };
            _jsonContent = System.Text.Json.JsonSerializer.Serialize(jsonDoc.RootElement, options);
            await ValidateJson();
        }
        catch (Exception ex)
        {
            _validationResult = $"✗ Cannot format: {ex.Message}";
            _isValidJson = false;
            StateHasChanged();
        }
    }

    private async Task MinifyJson()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_jsonContent)) return;

            using var jsonDoc = JsonDocument.Parse(_jsonContent);
            _jsonContent = System.Text.Json.JsonSerializer.Serialize(jsonDoc.RootElement);
            await ValidateJson();
        }
        catch (Exception ex)
        {
            _validationResult = $"✗ Cannot minify: {ex.Message}";
            _isValidJson = false;
            StateHasChanged();
        }
    }
}